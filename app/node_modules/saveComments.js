'use strict';

module.exports = function(req, res, next){
	if('POST' !== req.method){
		console.log('Request should be post');
		return next();
	}

    if(!req.session.email || req.session.email.length <= 0){
        console.log('Attempt to comment without logging in.');
		return res.send(500);
    } else if(req.body.pointId && req.body.summary
       && req.body.pointId.length > 0 && req.body.summary.length > 0){
        addComment(req.body.pointId, req.body.summary, req.session.email, res);
    } else if(req.body.title && req.body.title.length > 0
             && req.body.point && req.body.point.length > 0
             && req.body.services && req.body.services.length > 0
             && req.body.summary && req.body.summary.length > 0){
        var point = {
            title: req.body.title,
            point: req.body.point,
            services: req.body.services,
            summary: req.body.summary,
            author: req.session.email
        };
        console.log('adding new point', point, req.body);
        addNewPoint(point, res);
    } else {
		console.log('Not all fields were filled in: ', req.body);
		return res.send(500);
	}
};

function addComment(pointId, comment, email, res){
	var q = module.require('q'),
	    fs = module.require('fs'),
	    path = module.require('path'),
	    moment = module.require('moment'),
	    config = module.require('config'),
        prettyjson = module.require('prettyjson');
	var timestamp = moment().unix(),
	    target = path.resolve(path.dirname(module.parent.filename), '../', config.comments.target, './' + pointId + '.json'),
	    defer = q.defer();

	fs.exists(target, defer.resolve);
	var p = defer.promise;
	p.then(function(exists){
		if(!exists){
            throw new Error('The given point does not exist.');
		}
        return q.nfcall(fs.readFile, target);
    })
    .then(function(contents){
        contents = JSON.parse(contents);
        contents.comments = contents.comments || [];
        contents.comments.push({content: comment, author: email});
        return q.nfcall(fs.writeFile, target, prettyjson(contents));
    })
    .then(function(){
        res.send(200);
    })
    .fail(function(error){
		console.error(error);
		res.send(500);
	 })
    .done();
}

function addNewPoint(point, res){
	var q = module.require('q'),
	    fs = module.require('fs'),
	    path = module.require('path'),
	    moment = module.require('moment'),
	    config = module.require('config'),
        prettyjson = module.require('prettyjson');
	var timestamp = moment().unix(),
	    target = path.resolve(path.dirname(module.parent.filename), '../', config.comments.target),
	    defer = q.defer();
	
	fs.exists(target, defer.resolve);
	var p = defer.promise;
	p.then(
		function(exists){
			if(exists){
				return;
			}
			var mkdirDefer = q.defer();
			fs.mkdir(target, mkdirDefer.resolve);
			return mkdirDefer.promise;
		}
	)
	.then(
		function(){
			var id = point.title.replace(' ', '-', 'g').replace(/[^A-Za-z0-9_-]/g, '');
			var contents = {
				id: id,
				discussion: 'form',
				title: point.title,
				services: point.services.split(','),
				// topics: []
				tosdr: {
					point: point.point
				},
				meta: {
					author: point.author
				},
				comments: [
                    {
						author: point.author,
						content: point.comment
					}
				]
			};
            // TODO: Save the timestamp?
            var filename = id + '.json';
            filename = filename.replace(path.sep, '_').replace(path.delimiter, '_');
			return q.nfcall(fs.writeFile,
			                path.resolve(target, filename),
			                prettyjson(contents));
	 })
	 .then(function(){
		res.send(200);
	 })
	 .fail(function(error){
		console.error(error);
		res.send(500);
	 })
    .done();
}
